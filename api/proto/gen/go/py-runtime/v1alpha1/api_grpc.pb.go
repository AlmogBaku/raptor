// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: py-runtime/v1alpha1/api.proto

package runtimev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	LoadProgram(ctx context.Context, in *LoadProgramRequest, opts ...grpc.CallOption) (*LoadProgramResponse, error)
	ExecuteProgram(ctx context.Context, in *ExecuteProgramRequest, opts ...grpc.CallOption) (*ExecuteProgramResponse, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) LoadProgram(ctx context.Context, in *LoadProgramRequest, opts ...grpc.CallOption) (*LoadProgramResponse, error) {
	out := new(LoadProgramResponse)
	err := c.cc.Invoke(ctx, "/runtime.v1alpha1.RuntimeService/LoadProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ExecuteProgram(ctx context.Context, in *ExecuteProgramRequest, opts ...grpc.CallOption) (*ExecuteProgramResponse, error) {
	out := new(ExecuteProgramResponse)
	err := c.cc.Invoke(ctx, "/runtime.v1alpha1.RuntimeService/ExecuteProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations should embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	LoadProgram(context.Context, *LoadProgramRequest) (*LoadProgramResponse, error)
	ExecuteProgram(context.Context, *ExecuteProgramRequest) (*ExecuteProgramResponse, error)
}

// UnimplementedRuntimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) LoadProgram(context.Context, *LoadProgramRequest) (*LoadProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadProgram not implemented")
}
func (UnimplementedRuntimeServiceServer) ExecuteProgram(context.Context, *ExecuteProgramRequest) (*ExecuteProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteProgram not implemented")
}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_LoadProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).LoadProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.RuntimeService/LoadProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).LoadProgram(ctx, req.(*LoadProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ExecuteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ExecuteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.RuntimeService/ExecuteProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ExecuteProgram(ctx, req.(*ExecuteProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.v1alpha1.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadProgram",
			Handler:    _RuntimeService_LoadProgram_Handler,
		},
		{
			MethodName: "ExecuteProgram",
			Handler:    _RuntimeService_ExecuteProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "py-runtime/v1alpha1/api.proto",
}
