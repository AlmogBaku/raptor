// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: py-runtime/v1alpha1/api.proto

package runtimev1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	corev1alpha1 "github.com/raptor-ml/raptor/api/proto/gen/go/core/v1alpha1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = corev1alpha1.Primitive(0)
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SideEffect with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SideEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SideEffect with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SideEffectMultiError, or
// nil if none found.
func (m *SideEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *SideEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	// no validation rules for Args

	// no validation rules for Conditional

	if len(errors) > 0 {
		return SideEffectMultiError(errors)
	}

	return nil
}

// SideEffectMultiError is an error wrapping multiple validation errors
// returned by SideEffect.ValidateAll() if the designated constraints aren't met.
type SideEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SideEffectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SideEffectMultiError) AllErrors() []error { return m }

// SideEffectValidationError is the validation error returned by
// SideEffect.Validate if the designated constraints aren't met.
type SideEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SideEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SideEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SideEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SideEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SideEffectValidationError) ErrorName() string { return "SideEffectValidationError" }

// Error satisfies the builtin error interface
func (e SideEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSideEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SideEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SideEffectValidationError{}

// Validate checks the field values on ExecuteProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteProgramRequestMultiError, or nil if none found.
func (m *ExecuteProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ExecuteProgramRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExecuteProgramRequest_Fqn_Pattern.MatchString(m.GetFqn()) {
		err := ExecuteProgramRequestValidationError{
			field:  "Fqn",
			reason: "value does not match regex pattern \"(i?)^([a0-z9\\\\-\\\\.]*)(\\\\[([a0-z9])*\\\\])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keys

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ExecuteProgramRequestValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ExecuteProgramRequestValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ExecuteProgramRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteProgramRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteProgramRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteProgramRequestValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return ExecuteProgramRequestMultiError(errors)
	}

	return nil
}

func (m *ExecuteProgramRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ExecuteProgramRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteProgramRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteProgramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteProgramRequestMultiError) AllErrors() []error { return m }

// ExecuteProgramRequestValidationError is the validation error returned by
// ExecuteProgramRequest.Validate if the designated constraints aren't met.
type ExecuteProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteProgramRequestValidationError) ErrorName() string {
	return "ExecuteProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteProgramRequestValidationError{}

var _ExecuteProgramRequest_Fqn_Pattern = regexp.MustCompile("(i?)^([a0-z9\\-\\.]*)(\\[([a0-z9])*\\])?$")

// Validate checks the field values on ExecuteProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteProgramResponseMultiError, or nil if none found.
func (m *ExecuteProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ExecuteProgramResponseValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteProgramResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteProgramResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteProgramResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keys

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteProgramResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteProgramResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteProgramResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteProgramResponseMultiError(errors)
	}

	return nil
}

func (m *ExecuteProgramResponse) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ExecuteProgramResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteProgramResponse.ValidateAll() if the designated
// constraints aren't met.
type ExecuteProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteProgramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteProgramResponseMultiError) AllErrors() []error { return m }

// ExecuteProgramResponseValidationError is the validation error returned by
// ExecuteProgramResponse.Validate if the designated constraints aren't met.
type ExecuteProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteProgramResponseValidationError) ErrorName() string {
	return "ExecuteProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteProgramResponseValidationError{}

// Validate checks the field values on LoadProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadProgramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadProgramRequestMultiError, or nil if none found.
func (m *LoadProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = LoadProgramRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoadProgramRequest_Fqn_Pattern.MatchString(m.GetFqn()) {
		err := LoadProgramRequestValidationError{
			field:  "Fqn",
			reason: "value does not match regex pattern \"(i?)^([a0-z9\\\\-\\\\.]*)(\\\\[([a0-z9])*\\\\])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Program

	if len(errors) > 0 {
		return LoadProgramRequestMultiError(errors)
	}

	return nil
}

func (m *LoadProgramRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LoadProgramRequestMultiError is an error wrapping multiple validation errors
// returned by LoadProgramRequest.ValidateAll() if the designated constraints
// aren't met.
type LoadProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadProgramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadProgramRequestMultiError) AllErrors() []error { return m }

// LoadProgramRequestValidationError is the validation error returned by
// LoadProgramRequest.Validate if the designated constraints aren't met.
type LoadProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadProgramRequestValidationError) ErrorName() string {
	return "LoadProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadProgramRequestValidationError{}

var _LoadProgramRequest_Fqn_Pattern = regexp.MustCompile("(i?)^([a0-z9\\-\\.]*)(\\[([a0-z9])*\\])?$")

// Validate checks the field values on LoadProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadProgramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadProgramResponseMultiError, or nil if none found.
func (m *LoadProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = LoadProgramResponseValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Primitive

	for idx, item := range m.GetSideEffects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadProgramResponseValidationError{
						field:  fmt.Sprintf("SideEffects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadProgramResponseValidationError{
						field:  fmt.Sprintf("SideEffects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadProgramResponseValidationError{
					field:  fmt.Sprintf("SideEffects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoadProgramResponseMultiError(errors)
	}

	return nil
}

func (m *LoadProgramResponse) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LoadProgramResponseMultiError is an error wrapping multiple validation
// errors returned by LoadProgramResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadProgramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadProgramResponseMultiError) AllErrors() []error { return m }

// LoadProgramResponseValidationError is the validation error returned by
// LoadProgramResponse.Validate if the designated constraints aren't met.
type LoadProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadProgramResponseValidationError) ErrorName() string {
	return "LoadProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadProgramResponseValidationError{}
